"use strict";(self.webpackChunk_synthql_docs=self.webpackChunk_synthql_docs||[]).push([[237],{7483:(e,n,t)=>{t.r(n),t.d(n,{default:()=>l});var s=t(5750),i=t(7718),o=t(6266),r=t(3851),a=t(2322);function l(){return(0,a.jsxs)(o.Z,{title:"SynthQL: Type-safe, composable queries",description:"The type-safe, composable query language",children:[(0,a.jsx)("header",{style:{minHeight:"70vh",background:"var(--ifm-hero-background)",width:"100vw",display:"grid",placeItems:"center"},children:(0,a.jsxs)("div",{style:{maxWidth:600,padding:20,textAlign:"center",display:"flex",flexDirection:"column",gap:0},children:[(0,a.jsx)("div",{style:{background:"url('./img/logo.webp')",height:"80px",width:"80px",backgroundSize:"cover",borderRadius:"100%",margin:"0 auto"}}),(0,a.jsx)("h1",{style:{textAlign:"center"},children:"SynthQL"}),(0,a.jsx)("p",{children:"The type-safe http client for your PostgreSQL database."}),(0,a.jsx)(i.Z,{to:"/docs/getting-started",children:(0,a.jsx)("button",{className:"button button--primary button--lg",children:"Get started"})})]})}),(0,a.jsx)("div",{style:{height:80}}),(0,a.jsxs)("main",{className:"container",children:[(0,a.jsx)("section",{style:{minHeight:"70vh",display:"flex",gap:0,flexDirection:"column",padding:40},children:(0,a.jsxs)("div",{className:"row",children:[(0,a.jsxs)("div",{className:"col col--6",children:[(0,a.jsx)("h2",{children:"What is SynthQL"}),(0,a.jsx)("p",{children:"SynthQL is a full stack HTTP client for your PostgreSQL database. It lets you declaratively describe your React component's data dependencies."}),(0,a.jsx)("p",{children:"With SynthQL you can focus on building great products instead of spending time thinking how to most efficiently fetch data into your components."}),(0,a.jsx)("p",{children:"SynthQL reads your PostgreSQL database schema and generates types so you get type safety end to end."})]}),(0,a.jsx)("div",{className:"col col--6",children:(0,a.jsx)(s.Z,{language:"typescript",children:["const q = from('movies')","  .columns('id', 'title', 'release_date')","  .filter({ id: 1 })","  .take(10);","","// Execute the query","const { data: movies } = useSynthql(q);","","// movies is now an array of movies with id, title and release_date","// properties","console.log(movies[0].id)"].join("\n")})})]})}),(0,a.jsxs)("section",{children:[(0,a.jsx)("h1",{children:"Why SynthQL?"}),(0,a.jsx)("div",{style:{marginTop:40,display:"flex",flexDirection:"column",gap:80},children:d.map(((e,n)=>{let{title:t,link:o,description:l,code:d}=e;const c=[(0,a.jsx)("div",{className:"col col--6",children:(0,a.jsxs)("div",{style:{height:"100%",borderRadius:16},children:[(0,a.jsx)(r.Z,{as:"h3",children:t}),(0,a.jsx)("p",{style:{whiteSpace:"pre-wrap"},children:l}),o&&(0,a.jsx)(i.Z,{to:o,children:"Read more"})]})}),(0,a.jsx)("div",{className:"col col--6",children:(0,a.jsx)(s.Z,{language:"typescript",children:d})})];return(0,a.jsx)("div",{className:"row",children:c})}))})]}),(0,a.jsx)("section",{style:{display:"grid",placeItems:"center",minHeight:"60vh"},children:(0,a.jsxs)("div",{style:{display:"flex",flexDirection:"column",gap:16,transform:"translateY(-20%)"},children:[(0,a.jsx)("h2",{children:"Ready to get started?"}),(0,a.jsx)(i.Z,{to:"/docs/getting-started",children:(0,a.jsx)("button",{className:"button button--primary button--lg",children:"Jump to the docs!"})})]})})]})]})}const d=[{title:"End-to-end type safety",description:"Generate types from your schema with a single command. Run in on your CI to ensure types are always up to date.",link:"/docs/getting-started#generate-types",code:["npx @synthql/cli generate --url $DATABASE_URL"].join("\n")},{title:"Composable query language",description:"Build complex queries by composing smaller queries together. The SynthQL query language is designed for easy composition and re-use.",code:["const findPetsByOwner = (owner) =>","    from('pets')","        .filter({ owner })","        .many();","","const findPersonById = (id) => {","    const pets = findPetsByOwner(id)","    return from('people')","        .filter({ id })","        .include({ pets })","        .one()","    }"].join("\n")},{title:"Built-in pagination & streaming",link:"/docs/pagination",code:["\nconst query = from('users')\n    .filter({age: {gt:18}})\n    .take(100) // set the size of the page\n\nconst {data, fetchNextPage} = useSynthql(query)"].join("\n"),description:["Pagination in SynthQL just works. You don't need to do anything special to enable it."].join("\n")},{title:"Lazy queries",description:["As queries become bigger, latency also grows. Lazy queries help you split large object graphs to optimize page load.","","In the following example, we use a lazy query to load a store and its products separately. This means the store can load quickly and the products can load in the background.","This is especially useful when the products are not immediately visible on the page."].join("\n"),link:"/docs/lazy-queries",code:"\nconst products = from('products')\n    .column('id', 'name', 'price')\n    .filter({\n        product_id: { in: col('store.product_ids') }\n    })\n    .lazy()\n    .many()\n\nconst query = from('store')\n    .column('id', 'name')\n    .filter({ id })\n    .include({\n        products\n    })\n\n// Over the network this results in two\n// JSON lines\n[{ id: \"store 1\", name: \"Fnacy store\", products: { status: 'pending' } }]\n[{ id: \"store 1\", name: \"Fancy store\", products: { status: \"done\", data: [...] } }]\n            "},{title:"Security",link:"/docs/security",description:"SynthQL offers a number of security features to help you secure your application. This includes built-in authentication, query whitelisting, and more.",code:"\nconst findPetsByOwner = (ownerId) => {\n    return from('pets')\n        .column('name','id')\n        .filter({ ownerId })\n        .requires('pets:read')\n        .many()\n}\n\nconst findPersonByIds = (ids) => {\n    return from('people')\n        .column('first_name','last_name')\n        .requires('person:read')\n        .filter({id:{in:ids}})\n        .include({\n            films: findPetsByOwner(col('people.id'))\n        })\n        .many()\n}"},{title:"Custom query providers",link:"/docs/custom-query-executors",description:"Not all data comes from the database. Use custom providers to join your DB tables with data from 3rd party APIs using a predictable performance model.",code:"\nconst findFilmsWithRatings = () => {\n    const ratings = from('rotten_tomatoes_ratings')\n        .filter({\n            year:col('film.year')\n        })\n        .many()\n\n    return from('films')\n        .filter({ year: 1965 })\n        .include({ ratings })\n        .many()\n}"}]}}]);