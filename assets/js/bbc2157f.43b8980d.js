"use strict";(self.webpackChunk_synthql_docs=self.webpackChunk_synthql_docs||[]).push([[565],{1995:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>c,toc:()=>a});var r=s(2322),t=s(5392);const i={},o="Security",c={id:"security",title:"Security",description:"Letting clients make arbitrary queries, even if read-only comes with a set of security challenges. synthql comes with built in mechanisms to implement robust authorization logic so you can limit what queries clients can make.",source:"@site/docs/200-security.md",sourceDirName:".",slug:"/security",permalink:"/synthql/docs/security",draft:!1,unlisted:!1,editUrl:"https://github.com/synthql/synthql/tree/master/packages/docs/docs/200-security.md",tags:[],version:"current",sidebarPosition:200,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Getting started",permalink:"/synthql/docs/getting-started"},next:{title:"Query language",permalink:"/synthql/docs/query-language"}},l={},a=[{value:"Whitelisting queries",id:"whitelisting-queries",level:2},{value:"Restricting access to tables and columns",id:"restricting-access-to-tables-and-columns",level:2},{value:"Restricting access to rows",id:"restricting-access-to-rows",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,t.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"security",children:"Security"}),"\n",(0,r.jsx)(n.p,{children:"Letting clients make arbitrary queries, even if read-only comes with a set of security challenges. synthql comes with built in mechanisms to implement robust authorization logic so you can limit what queries clients can make."}),"\n",(0,r.jsx)(n.p,{children:"Let's take a look at the different ways synthql ensures only the right queries will be sent to your database."}),"\n",(0,r.jsx)(n.h2,{id:"whitelisting-queries",children:"Whitelisting queries"}),"\n",(0,r.jsxs)(n.p,{children:["By default, the ",(0,r.jsx)(n.code,{children:"QueryEngine"})," will not execute any query. It will only execute known queries. To register a query simply call the ",(0,r.jsx)(n.code,{children:"registerQueries"})," method as follows."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { from } from \"./db\"\n\nconst users = from('users')\n    .columns('id','name','email')\n\nconst queryEngine = new QueryEngine(opts);\n\nqueryEngine.registerQueries(users)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["What this means is that the ",(0,r.jsx)(n.code,{children:"QueryEngine"})," will only allow queries on the ",(0,r.jsx)(n.code,{children:"users"})," table and will allow any subset of the ",(0,r.jsx)(n.code,{children:"id"}),", ",(0,r.jsx)(n.code,{children:"name"})," and ",(0,r.jsx)(n.code,{children:"email"})," columns to be selected."]}),"\n",(0,r.jsxs)(n.p,{children:["This behaviour can be disabled with the ",(0,r.jsx)(n.code,{children:"allowUnknownQueries"})," option."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const queryEngine = new QueryEngine({..., allowUnknownQueries:true});\n"})}),"\n",(0,r.jsx)(n.h2,{id:"restricting-access-to-tables-and-columns",children:"Restricting access to tables and columns"}),"\n",(0,r.jsxs)(n.p,{children:["You can use the ",(0,r.jsx)(n.code,{children:".requires"})," method to define what permissions are required to run the query."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const users = from('users')\n    .columns('id','name','email')\n    .requires('users:read')\n\nconst pets = from('pets')\n    .columns('id','owner_id')\n    .requires('pets:read')\n    .include({\n        owner: users\n            .where({ owner_id: col('users.id') })\n            .maybe()\n    })\n\nconst userFull = from('users')\n    .columns('id','name','email','hashed_password')\n    .requires('users:read','users:admin')\n"})}),"\n",(0,r.jsx)(n.p,{children:"When executing queries you can pass a list of the user's current permissions."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const user = { permissions: ['users:read', 'pets:read'] }\nqueryEngine.execute(query, { user })\n"})}),"\n",(0,r.jsx)(n.p,{children:"The query engine will traverse the query recursively and reject the query unless it meets all the ACL requirements."}),"\n",(0,r.jsx)(n.h2,{id:"restricting-access-to-rows",children:"Restricting access to rows"}),"\n",(0,r.jsxs)(n.p,{children:["Let's imagine an ",(0,r.jsx)(n.code,{children:"orders"})," table that stores all orders made by ",(0,r.jsx)(n.code,{children:"users"}),". A user should only\never be allowed to read it's own orders. This can be achieved with synthql as follows:"]}),"\n",(0,r.jsx)(n.p,{children:"First let's define the schema"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"// queries.ts\nimport { from } from \"./db\";\n\nconst orders = from('orders')\n    .columns('id','total_amount','product_ids','user_id')\n"})}),"\n",(0,r.jsx)(n.p,{children:"Now let's imagine a client makes the following query. Note that this query would select all orders."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'import { useSynthql } from "@synthql/react"\nimport { orders } from "./queries"\n\n\nconst query = orders\n    .where(isNotNull(\'id\'))\n    .many();\n\nuseSynthql(query)\n'})}),"\n",(0,r.jsxs)(n.p,{children:["To prevent these kinds of mistakes or abuses, you can add middlewares to the ",(0,r.jsx)(n.code,{children:"QueryEngine"}),". A middleware is essentially a function that takes the query context and the current query and return a new query context and a new query."]}),"\n",(0,r.jsxs)(n.p,{children:["In this example we're creating a middleware that will act on every query to the ",(0,r.jsx)(n.code,{children:"orders"})," table and will for a filter on the ",(0,r.jsx)(n.code,{children:"user_id"})," column."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'import { DB } from "./db"\nimport { QueryEngine, mapQuery } from "@synthql/backend";\nimport { orders } from "./queries";\n\nconst restrictOrdersByUser = middleware<DB>()\n    .from(\'orders\')\n    .mapQuery((query, context) => {\n        const userId = context.user.id\n        return {\n            context,\n            query: {\n                ...query,\n                // transforms the `where` to ensure that only orders can be read from the\n                // current user.\n                where: {\n                    ...query.where,  \n                    user_id: userId\n                }\n            }\n        }\n    })\n\nconst queryEngine = new QueryEngine<DB>({ \n    middlewares: [restrictOrdersByUser] \n})\n\nqueryEngine.registerQueries(orders)\n'})})]})}function u(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},5392:(e,n,s)=>{s.d(n,{Z:()=>c,a:()=>o});var r=s(2784);const t={},i=r.createContext(t);function o(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);