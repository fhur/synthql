"use strict";(self.webpackChunk_synthql_docs=self.webpackChunk_synthql_docs||[]).push([[760],{3044:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>l,frontMatter:()=>o,metadata:()=>a,toc:()=>d});var s=t(2322),i=t(5392);const o={},r="Query composition & reuse",a={id:"query-composition",title:"Query composition & reuse",description:"In my opinion one of the bigger issues with SQL is the fact that you cannot compose larger queries from simpler queries.",source:"@site/docs/350-query-composition.md",sourceDirName:".",slug:"/query-composition",permalink:"/SynthQL/docs/query-composition",draft:!1,unlisted:!1,editUrl:"https://github.com/synthql/SynthQL/tree/master/packages/docs/docs/350-query-composition.md",tags:[],version:"current",sidebarPosition:350,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Examples",permalink:"/SynthQL/docs/examples"},next:{title:"Pagination",permalink:"/SynthQL/docs/pagination"}},c={},d=[{value:"Defining views",id:"defining-views",level:2}];function u(e){const n={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"query-composition--reuse",children:"Query composition & reuse"}),"\n",(0,s.jsx)(n.p,{children:"In my opinion one of the bigger issues with SQL is the fact that you cannot compose larger queries from simpler queries."}),"\n",(0,s.jsx)(n.p,{children:"Effectively this means that it is impossible to share SQL fragments between queries, so if you have a Users query and a Pets query, to make a Pets with Owners query you have to make a completely different query."}),"\n",(0,s.jsx)(n.p,{children:"SynthQL is designed for composition and lets you achieve this in several ways. Let's see a few examples:"}),"\n",(0,s.jsx)(n.h2,{id:"defining-views",children:"Defining views"}),"\n",(0,s.jsxs)(n.p,{children:["The first step towards reusable queries is to be able to give a name to a table + columns. I call these ",(0,s.jsx)(n.code,{children:"views"})," and they can be defined as follows"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// A view over the pets table\nconst pet = from('pets')\n    .column('id','name')\n\n// A view over the person table\nconst person = from('person')\n    .column('id','name','age')\n\n// A detailed view into the person table, along with their pets\nconst personDetailed = from('person')\n    .column('id','name','age','created_at','updated_at', ...)\n    .include({\n        pet: pet.where({ owner_id: col('person.id') }).many()\n    })\n"})}),"\n",(0,s.jsx)(n.p,{children:"Once you have views, you can easily turn these into queries as follows:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"function findPetById(id:number) {\n    return pet.where({id}).maybe()\n}\n\nfunciton findPersonLight(id:number) {\n    return person.where({id}).maybe()\n}\n\nfunction findPersonDetails(id:number) {\n    return personDetailed.where({id}).maybe()\n}\n"})})]})}function l(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},5392:(e,n,t)=>{t.d(n,{Z:()=>a,a:()=>r});var s=t(2784);const i={},o=s.createContext(i);function r(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);