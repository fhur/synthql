<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://synthql.github.io/SynthQL/blog</id>
    <title>SynthQL Blog</title>
    <updated>2024-05-10T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="http://synthql.github.io/SynthQL/blog"/>
    <subtitle>SynthQL Blog</subtitle>
    <icon>http://synthql.github.io/SynthQL/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[Why JSON Schema?]]></title>
        <id>http://synthql.github.io/SynthQL/blog/why-json-schema</id>
        <link href="http://synthql.github.io/SynthQL/blog/why-json-schema"/>
        <updated>2024-05-10T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[I wanted to drop a few words on why we're chosing JSON schema as an intermediate representation for our schemas. Putting it in writing will make it clearer, so here goes.]]></summary>
        <content type="html"><![CDATA[<p>I wanted to drop a few words on why we're chosing <code>JSON schema</code> as an intermediate representation for our schemas. Putting it in writing will make it clearer, so here goes.</p>
<h2 class="anchor anchorWithStickyNavbar_fF9Z" id="the-goal-static--runtime-information-about-your-schema">The goal: Static &amp; Runtime information about your schema<a href="http://synthql.github.io/SynthQL/blog/why-json-schema#the-goal-static--runtime-information-about-your-schema" class="hash-link" aria-label="Direct link to The goal: Static &amp; Runtime information about your schema" title="Direct link to The goal: Static &amp; Runtime information about your schema">​</a></h2>
<p>Let's start by asking ourselves what is the goal: the goal is to have schema information available to the query builder so you can build queries safely (no typos) and with great DX (auto completion).</p>
<p>To achieve this, the query builder needs to know the shape of your DB schema and convert it to something that the TypeScript compiler can understand.</p>
<p>So we know that the query builder needs static type information. What's new is that the query builder also needs information at runtime about your schema. Let's look at a few examples that we want to support:</p>
<h3 class="anchor anchorWithStickyNavbar_fF9Z" id="sub-goal-select-all-fields">Sub goal: select all fields<a href="http://synthql.github.io/SynthQL/blog/why-json-schema#sub-goal-select-all-fields" class="hash-link" aria-label="Direct link to Sub goal: select all fields" title="Direct link to Sub goal: select all fields">​</a></h3>
<p>Let's look at a very basic example. Find an actor by ID.</p>
<div class="language-ts codeBlockContainer_ZGJx theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_qZBB"><pre tabindex="0" class="prism-code language-ts codeBlock_TAPP thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_AdAo"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">from</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'actors'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">where</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> id</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">maybe</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup_TNwR"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_MVhB" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_yxgH"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_QJLJ"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>We expect this to compile to something like</p>
<div class="language-sql codeBlockContainer_ZGJx theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_qZBB"><pre tabindex="0" class="prism-code language-sql codeBlock_TAPP thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_AdAo"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">select</span><span class="token plain"> actor_id</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> name</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> actors</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">where</span><span class="token plain"> id </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> $</span><span class="token number" style="color:#36acaa">1</span><br></span></code></pre><div class="buttonGroup_TNwR"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_MVhB" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_yxgH"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_QJLJ"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Notice that I didn't write <code>select *</code>. That's intentional, because we can only select "selectable" fields. So the query builder needs to let the columns "default" to something like <code>Object.keys(db.actors.columns)</code>. This is hint #1 that we need the schema available at runtime.</p>
<h3 class="anchor anchorWithStickyNavbar_fF9Z" id="sub-goal-infer-the-groupingid">Sub goal: infer the groupingId<a href="http://synthql.github.io/SynthQL/blog/why-json-schema#sub-goal-infer-the-groupingid" class="hash-link" aria-label="Direct link to Sub goal: infer the groupingId" title="Direct link to Sub goal: infer the groupingId">​</a></h3>
<div class="language-ts codeBlockContainer_ZGJx theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_qZBB"><pre tabindex="0" class="prism-code language-ts codeBlock_TAPP thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_AdAo"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">from</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'actor'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">where</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">id</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">include</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> films </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">maybe</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">groupingId</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'actor_id'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> # </span><span class="token operator" style="color:#393A34">&lt;=</span><span class="token operator" style="color:#393A34">===</span><span class="token operator" style="color:#393A34">===</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">WHY</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">DO</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">I</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">HAVE</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">TO</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">DO</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">THIS</span><span class="token operator" style="color:#393A34">?</span><br></span></code></pre><div class="buttonGroup_TNwR"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_MVhB" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_yxgH"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_QJLJ"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>As you've already experienced the grouping ID is an annoyance. In most cases we can simply infer it: it's the primary key of the table. To actually infer it we need to have at runtime, type information available to the query builder so that the query builder can do something like</p>
<div class="language-ts codeBlockContainer_ZGJx theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_qZBB"><pre tabindex="0" class="prism-code language-ts codeBlock_TAPP thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_AdAo"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> groupingId </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> db</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">actor</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">primaryKey</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup_TNwR"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_MVhB" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_yxgH"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_QJLJ"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Both of these sub-goals imply that in the near future the query builder will be passed not just the DB static type, but also some kind of runtime information about your schema.</p>
<div class="language-ts codeBlockContainer_ZGJx theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_qZBB"><pre tabindex="0" class="prism-code language-ts codeBlock_TAPP thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_AdAo"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// old version: only has static type information available</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> from </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token generic-function function" style="color:#d73a49">query</span><span class="token generic-function generic class-name operator" style="color:#393A34">&lt;</span><span class="token generic-function generic class-name constant" style="color:#36acaa">DB</span><span class="token generic-function generic class-name operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">from</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// new version: has both static and runtime type information available</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> from </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token generic-function function" style="color:#d73a49">query</span><span class="token generic-function generic class-name operator" style="color:#393A34">&lt;</span><span class="token generic-function generic class-name constant" style="color:#36acaa">DB</span><span class="token generic-function generic class-name operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">db</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">from</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup_TNwR"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_MVhB" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_yxgH"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_QJLJ"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h1>So... why JSON schema?</h1>
<p>Ok, now that we've talked about some of the goals we want to support: let's go back to the original question. Why is JSON schema a good choice?</p>
<ol>
<li>There is great tooling support for JSON schema: We can find libraries that generate zod from JSON schema or generate TypeScript types from json schema.</li>
<li>Building a JSON schema programmatically is really easy. Converting from <code>pg-extract-schema</code> to JSON schema is trivial, and very easy to unit test.</li>
<li>JSON schema itself is available at runtime: As JSON schema is just a plain old javascript object, it's available at runtime, and so we can pass it to the query builer as input so it can use it to infer the groupingId and select all the fields.</li>
<li>Runtime type checking: In the future we will want to add something like zod to the <code>QueryEngine</code> so that it blocks malformed queries. Using JSON Schema we can get zod for free.</li>
</ol>]]></content>
        <author>
            <name>Fernando Hurtado</name>
            <uri>https://github.com/fhur</uri>
        </author>
        <category label="devlog" term="devlog"/>
    </entry>
</feed>