import { QueryEngine } from '..';
import { IntrospectSchemaConfig, PgSchema, TableDef } from './introspectSchema';
import * as fs from 'fs';

export interface GenerateSchemaConfig extends IntrospectSchemaConfig {
    out?: string;
    defaultSchema?: string;
}

export async function generateSchema(
    queryEngine: QueryEngine<any>,
    config: GenerateSchemaConfig,
) {
    const engine = queryEngine as QueryEngine<PgSchema>;
    const schema = await engine.introspect(config);

    const str = `
// This file was generated by @synthql/backend
import { query } from "@synthql/queries"
export const db = {
${schema.tables.map((table) => generateTable(table, config)).join(',\n')}
} as const;

type AllNumberTypes = {
    schema: 'pg_catalog',
    name: 'int2' | 'int4' | 'numeric'
}

interface AllStringTypes {
    schema: 'pg_catalog',
    name: 'text' | 'varchar' | 'bpchar' | 'bytea' | 'bpchar' | 'uuid' | 'int8' | 'tsvector'
}

interface AllBoolTypes {
    schema: 'pg_catalog',
    name: 'bool'
}

interface AllDateTypes {
    schema: 'pg_catalog',
    name: 'date' | 'timestamptz'
}

type ConvertPgType<T> =
    T extends AllNumberTypes ? number
    : T extends AllStringTypes ? string
    : T extends AllBoolTypes ? boolean
    : T extends AllDateTypes ? Date
    : [unknown, T]

type InferColumn<T> =
    // Nullable check
    T extends { nullable: true, type: infer Type } ? null | ConvertPgType<Type> :
    T extends { type: infer Type } ? ConvertPgType<Type> : never

type InferTable<T> =
    T extends { columns: infer C } ? { [column in keyof C]: InferColumn<C[column]> } : never

type InferDB<T> = {
    [table in keyof T]: InferTable<T[table]>
}

export type DB = InferDB<typeof db>
export const from = query<DB>().from;
`;
    if (config.out) {
        fs.writeFileSync(config.out, str);
        return '';
    }
    return str;
}

function generateTable(table: TableDef, config: GenerateSchemaConfig): string {
    console.warn('Generating table', table.name);
    return `    '${formatTableName(table, config)}': ${JSON.stringify(table, null, 4)}`;
}

function formatTableName(
    table: TableDef,
    config: GenerateSchemaConfig,
): string {
    const { defaultSchema } = config;
    if (defaultSchema) {
        return table.name.replace(`${defaultSchema}.`, '');
    }

    return table.name;
}
